/*
 * test.h
 *
 *  Created on: Jul 2, 2015
 *      Author: christine
 */

#ifndef TEST_H_
#define TEST_H_

#include "epidemic-packet-queue.h"
#include "epidemic-packet.h"
#include "ns3/random-variable-stream.h"
#include "epidemic-tag.h"
#include <vector>
#include "ns3/boolean.h"
#include "ns3/config.h"
#include "ns3/node.h"
#include "ns3/ipv4-routing-protocol.h"
#include "ns3/inet-socket-address.h"
#include "ns3/ipv4-interface.h"
#include "ns3/ipv4-l3-protocol.h"
#include "ns3/output-stream-wrapper.h"
#include "ns3/timer.h"
#include <iostream>
#include <algorithm>
#include <functional>
#include "ns3/ipv4-route.h"
#include "ns3/socket.h"
#include "ns3/log.h"
#include "ns3/aodv-rtable.h"
#include "ns3/aodv-rqueue.h"
#include "aodv-packet.h"
#include "aodv-neighbor.h"
#include "aodv-dpd.h"
#include "ns3/node.h"
#include "ns3/random-variable-stream.h"
#include "ns3/output-stream-wrapper.h"
#include "ns3/ipv4-routing-protocol.h"
#include "ns3/ipv4-interface.h"
#include "ns3/ipv4-l3-protocol.h"
#include "ns3/aodv-routing-protocol.h"
#include <map>

namespace ns3 {

namespace Epidemic {

class test : public Ipv4RoutingProtocol {
public:
	  /**
	   *  Get the registered TypeId for this class.
	   *  \return The object TypeId.
	   */
	  static TypeId GetTypeId (void);
	test();
	virtual ~test();

private:
  //calling epidemic attributes
  /// Main IP address for the current node
  Ipv4Address m_mainAddress;
  /// Number of times a packet is resent
  uint32_t m_hopCount;
  /// Maximum number of packets a queue can hold
  uint32_t m_maxQueueLen;
  /// Time in seconds after which the packet will expire in the queue
  Time m_queueEntryExpireTime;
  /// Time in seconds for sending periodic beacon packets
  Time m_beaconInterval;
  /// Time in seconds for host recent period, in which hosts can not
  // re-exchange summary vectors
  Time m_hostRecentPeriod;
  /// Upper bound of the uniform distribution random time added
  // to avoid collisions. Measured in milliseconds
  uint32_t m_beaconMaxJitterMs;
  /// Local counter for data packets
  uint16_t m_dataPacketCounter;
  /// A pointer to the Ipv4 for the current node
  Ptr<Ipv4> m_ipv4;
  /// A map between opened sockets and IP addresses
  std::map<Ptr<Socket>, Ipv4InterfaceAddress> m_socketAddresses;
  /// queue associated with a node
  PacketQueue m_queue;
  /// timer for sending beacons
  Timer m_beaconTimer;
  /// uniform random variable to be added to beacon intervals
  // to avoid collisions
  Ptr<UniformRandomVariable> m_beaconJitter;
  ///  Type to connect a host address to recent contact time value
  typedef std::map<Ipv4Address, Time> HostContactMap;
  /// Pair representing host address and time value
  typedef HostContactMap::value_type   HostContactMapPair;
  /// Hash table to store recent contact time for nodes
  HostContactMap m_hostContactTime;

  // Inherited methods:
  Ptr<Ipv4Route> RouteOutput (Ptr<Packet> p, const Ipv4Header &header,
                               Ptr<NetDevice> oif, Socket::SocketErrno &sockerr);
   bool RouteInput (Ptr<const Packet> p, const Ipv4Header &header,
                    Ptr<const NetDevice> idev, UnicastForwardCallback ucb,
                    MulticastForwardCallback mcb,
                    LocalDeliverCallback lcb, ErrorCallback ecb);
   virtual void PrintRoutingTable (Ptr<OutputStreamWrapper> stream) const;
   virtual void NotifyInterfaceUp (uint32_t interface);
   virtual void NotifyInterfaceDown (uint32_t interface);
   virtual void NotifyAddAddress (uint32_t interface,
                                  Ipv4InterfaceAddress address);
   virtual void NotifyRemoveAddress (uint32_t interface,
                                     Ipv4InterfaceAddress address);
   virtual void SetIpv4 (Ptr<Ipv4> ipv4);

   // Handle protocol parameters
    Time GetMaxQueueTime () const { return MaxQueueTime; }
    void SetMaxQueueTime (Time t);
    uint32_t GetMaxQueueLen () const { return MaxQueueLen; }
    void SetMaxQueueLen (uint32_t len);
    bool GetDesinationOnlyFlag () const { return DestinationOnly; }
    void SetDesinationOnlyFlag (bool f) { DestinationOnly = f; }
    bool GetGratuitousReplyFlag () const { return GratuitousReply; }
    void SetGratuitousReplyFlag (bool f) { GratuitousReply = f; }
    void SetHelloEnable (bool f) { EnableHello = f; }
    bool GetHelloEnable () const { return EnableHello; }
    void SetBroadcastEnable (bool f) { EnableBroadcast = f; }
    bool GetBroadcastEnable () const { return EnableBroadcast; }

  /// IP protocol
    Ptr<Ipv4> m_ipv4;
    /// Raw unicast socket per each IP interface, map socket -> iface address (IP + mask)
    std::map< Ptr<Socket>, Ipv4InterfaceAddress > m_socketAddresses;
    /// Raw subnet directed broadcast socket per each IP interface, map socket -> iface address (IP + mask)
    std::map< Ptr<Socket>, Ipv4InterfaceAddress >;
    /// Loopback device used to defer RREQ until packet will be fully formed
    Ptr<NetDevice> m_lo;

    /// Routing table
    aodv::RoutingTable m_routingTable;
    /// A "drop-front" queue used by the routing layer to buffer packets to which it does not have a route.
    aodv::RequestQueue a_queue;
    /// Broadcast ID
    uint32_t m_requestId;
    /// Request sequence number
    uint32_t m_seqNo;
    /// Handle duplicated RREQ
    aodv::IdCache m_rreqIdCache;
    /// Handle duplicated broadcast/multicast packets
    aodv::DuplicatePacketDetection m_dpd;
    /// Handle neighbors
    aodv::Neighbors m_nb;
    /// Number of RREQs used for RREQ rate control
    uint16_t m_rreqCount;
    /// Number of RERRs used for RERR rate control
    uint16_t m_rerrCount;

    uint32_t RreqRetries;             ///< Maximum number of retransmissions of RREQ with TTL = NetDiameter to discover a route
    uint16_t RreqRateLimit;           ///< Maximum number of RREQ per second.
    uint16_t RerrRateLimit;           ///< Maximum number of REER per second.
    Time ActiveRouteTimeout;          ///< Period of time during which the route is considered to be valid.
    uint32_t NetDiameter;             ///< Net diameter measures the maximum possible number of hops between two nodes in the network
    /**
     *  NodeTraversalTime is a conservative estimate of the average one hop traversal time for packets
     *  and should include queuing delays, interrupt processing times and transfer times.
     */
    Time NodeTraversalTime;
    Time NetTraversalTime;             ///< Estimate of the average net traversal time.
    Time PathDiscoveryTime;            ///< Estimate of maximum time needed to find route in network.
    Time MyRouteTimeout;               ///< Value of lifetime field in RREP generating by this node.
    /**
     * Every HelloInterval the node checks whether it has sent a broadcast  within the last HelloInterval.
     * If it has not, it MAY broadcast a  Hello message
     */
    Time HelloInterval;
    uint32_t AllowedHelloLoss;         ///< Number of hello messages which may be loss for valid link
    /**
     * DeletePeriod is intended to provide an upper bound on the time for which an upstream node A
     * can have a neighbor B as an active next hop for destination D, while B has invalidated the route to D.
     */
    Time DeletePeriod;
    Time NextHopWait;                  ///< Period of our waiting for the neighbour's RREP_ACK
    Time BlackListTimeout;             ///< Time for which the node is put into the blacklist
    uint32_t MaxQueueLen;              ///< The maximum number of packets that we allow a routing protocol to buffer.
    Time MaxQueueTime;                 ///< The maximum period of time that a routing protocol is allowed to buffer a packet for.
    bool DestinationOnly;              ///< Indicates only the destination may respond to this RREQ.
    bool GratuitousReply;              ///< Indicates whether a gratuitous RREP should be unicast to the node originated route discovery.
    bool EnableHello;                  ///< Indicates whether a hello messages enable
    bool EnableBroadcast;
    Ptr<UniformRandomVariable> m_uniformRandomVariable;
};
//Implement inherited methods from epidemic-routing-protocol.h

}
} /* namespace std */

#endif /* TEST_H_ */
