/*
 * sprayandwaitpacket.cpp
 *
 *  Created on: Jul 8, 2015
 *      Author: christine
 */

/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
/*
 * Copyright (c) 2013 Mohammed J.F. Alenazi
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation;
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * Author: Mohammed J.F. Alenazi  <malenazi@ittc.ku.edu>
 *
 * James P.G. Sterbenz <jpgs@ittc.ku.edu>, director
 * ResiliNets Research Group  http://wiki.ittc.ku.edu/resilinets
 * Information and Telecommunication Technology Center (ITTC)
 * and Department of Electrical Engineering and Computer Science
 * The University of Kansas Lawrence, KS USA.
 *
 * Work supported by King Saud University and
 * the ITTC at The University of Kansas.
 */
#include "epidemic-packet.h"
#include "sprayandwaitpacket.h"
#include "ns3/address-utils.h"
#include "ns3/log.h"
#include "ns3/packet.h"

namespace ns3 {

NS_LOG_COMPONENT_DEFINE ("SprayAndWaitPacket");

namespace Epidemic {

NS_OBJECT_ENSURE_REGISTERED (SprayAndWaitHeader);

SprayAndWaitHeader::~SprayAndWaitHeader ()
{
}


void
SprayAndWaitHeader::SetPacketID (uint32_t pktID)
{
  NS_LOG_FUNCTION (this << pktID);
  m_packetID = pktID;
}

uint32_t
SprayAndWaitHeader::GetPacketID  () const
{
  return m_packetID;
}


void
SprayAndWaitHeader::SetHopCount (uint32_t floodCount)
{
  NS_LOG_FUNCTION (this << floodCount);
  m_hopCount = floodCount;
}

uint32_t
SprayAndWaitHeader::GetHopCount () const
{

  return m_hopCount;
}


void
SprayAndWaitHeader::SetTimeStamp (Time timeStamp)
{
  NS_LOG_FUNCTION (this << timeStamp);
  m_timeStamp = timeStamp;
}


Time SprayAndWaitHeader::GetTimeStamp () const
{
  return m_timeStamp;
}

void
SprayAndWaitHeader::SetCopiesCount(uint32_t copiesCount)
{
	NS_LOG_FUNCTION (this << copiesCount);
	m_copiesCount = copiesCount;
}

uint32_t
SprayAndWaitHeader::GetCopiesCount () const
{
	return m_copiesCount;
}

TypeId
SprayAndWaitHeader::GetTypeId (void)
{
  static TypeId tid =
    TypeId ("ns3::Epidemic::SprayAndWaitHeader")
    .SetParent<Header> ()
    .AddConstructor<SprayAndWaitHeader> ();
  return tid;
}

TypeId
SprayAndWaitHeader::GetInstanceTypeId () const
{
  return GetTypeId ();
}

uint32_t
SprayAndWaitHeader::GetSerializedSize () const
{

  return sizeof(m_packetID) + sizeof(m_hopCount) + sizeof(m_timeStamp) + sizeof(m_copiesCount);

}

void
SprayAndWaitHeader::Serialize (Buffer::Iterator i) const
{
  i.WriteHtonU32 (m_packetID);
  i.WriteHtonU32 (m_hopCount);
  i.WriteHtonU64 (m_timeStamp.GetNanoSeconds ());
  i.WriteHtonU32 (m_copiesCount);

}

uint32_t
SprayAndWaitHeader::Deserialize (Buffer::Iterator start)
{
  Buffer::Iterator i = start;
  m_packetID = i.ReadNtohU32 ();
  m_hopCount = i.ReadNtohU32 ();
  m_timeStamp = Time (i.ReadNtohU64 ());
  m_copiesCount = i.ReadNtohU32 ();
  uint32_t dist = i.GetDistanceFrom (start);
  NS_ASSERT (dist == GetSerializedSize ());
  return dist;
}

std::ostream &
operator<< (std::ostream& os, const SprayAndWaitHeader & packet)
{
  packet.Print (os);
  return os;
}

void
SprayAndWaitHeader::Print (std::ostream &os) const
{
  os << " Packet ID: " << m_packetID << " Hop count: " << m_hopCount
     << " TimeStamp: " << m_timeStamp
     << " Copies Count: " << m_copiesCount;
}
} //end namespace epidemic
} //end namespace ns3

